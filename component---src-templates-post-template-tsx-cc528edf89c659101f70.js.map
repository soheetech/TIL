{"version":3,"file":"component---src-templates-post-template-tsx-cc528edf89c659101f70.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/post/postHead.tsx","webpack://gatsby-starter-default/./src/components/post/postContent.tsx","webpack://gatsby-starter-default/./src/components/post/commentWidget.tsx","webpack://gatsby-starter-default/./src/components/post/postPrevNext.tsx","webpack://gatsby-starter-default/./src/templates/postTemplate.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport TagSVG from '../../assets/tag'\r\nimport ClockSVG from '../../assets/clock'\r\n\r\nexport type PostHeadInfoProps = {\r\n  title: string\r\n  date: string\r\n  update: string\r\n  categories: string[]\r\n}\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  border-bottom: 1px solid var(--color-gray);\r\n  padding-bottom: 2rem;\r\n  margin-bottom: 2.5rem;\r\n`\r\n\r\nconst Title = styled.h2`\r\n  font-size: 42px;\r\n  font-weight: normal;\r\n  line-height: 1.25;\r\n  overflow-wrap: break-word;\r\n  word-break: break-word;\r\n`\r\n\r\nconst PostData = styled.div`\r\n  font-size: var(--font-small);\r\n  color: var(--color-graytext);\r\n  margin-top: 3rem;\r\n  column-gap: 8px;\r\n\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n\r\n  & > p {\r\n    padding: 2px 0;\r\n  }\r\n`\r\n\r\nconst Date = styled.p`\r\n  font-size: var(--font-small);\r\n  color: var(--color-graytext);\r\n  margin-bottom: 20px;\r\n`\r\n\r\nconst PostHead: FunctionComponent<PostHeadInfoProps> = function ({\r\n  title,\r\n  date,\r\n  update,\r\n  categories,\r\n}) {\r\n  return (\r\n    <PostHeadWrapper>\r\n      <Date>{date}</Date>\r\n      <Title>{title}</Title>\r\n      <PostData className=\"flex items-center wrap\">\r\n        <p className=\"flex items-center\">\r\n          <TagSVG customStyle=\"fill-gray stroke-gray size-s\" />\r\n          {categories.join(', ')}\r\n        </p>\r\n        {date !== update && (\r\n          <p className=\"flex items-center update\">\r\n            <ClockSVG customStyle=\"fill-gray size-s\" />\r\n            Last Updated {update}\r\n          </p>\r\n        )}\r\n      </PostData>\r\n    </PostHeadWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHead\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\ninterface PostContentProps {\r\n  html: string\r\n}\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  // Renderer Style\r\n  word-break: break-all;\r\n\r\n  // Markdown Style\r\n  line-height: 1.8;\r\n  font-size: 1rem;\r\n  font-weight: 400;\r\n\r\n  // Apply Padding Attribute to All Elements\r\n  p {\r\n    padding: 12px 0;\r\n  }\r\n\r\n  // Adjust Heading Element Style\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 500;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  h4,\r\n  h5,\r\n  h6 {\r\n    font-weight: 500;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    margin-top: 2.5rem;\r\n  }\r\n\r\n  * + h4,\r\n  * + h5,\r\n  * + h6 {\r\n    margin-top: 1.5rem;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  // Adjust Quotation Element Style\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 5px 15px;\r\n    border-left: 2px solid var(--color-black);\r\n    font-weight: 400;\r\n  }\r\n\r\n  // Adjust List Element Style\r\n  ol,\r\n  ul {\r\n    margin-left: 20px;\r\n    padding: 8px 0;\r\n  }\r\n\r\n  li {\r\n    list-style: auto;\r\n  }\r\n\r\n  // Adjust Horizontal Rule style\r\n  hr {\r\n    margin: 2.5rem 0;\r\n  }\r\n\r\n  // Adjust Link Element Style\r\n  a {\r\n    color: inherit;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  // Adjust Code Style\r\n  pre[class*='language-'] {\r\n    margin: 30px 0;\r\n    padding: 15px;\r\n    font-size: 15px;\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background: rgba(255, 255, 255, 0.5);\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n\r\n  code[class*='language-'],\r\n  pre[class*='language-'] {\r\n    tab-size: 2;\r\n  }\r\n`\r\n\r\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\r\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\r\n}\r\n\r\nexport default PostContent\r\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'soheetech/TIL' // repository\r\n\r\ntype UtterancesAttributesType = {\r\n  src: string\r\n  repo: string\r\n  'issue-term': string\r\n  label: string\r\n  theme: string\r\n  crossorigin: string\r\n  async: string\r\n}\r\n\r\nconst UtterancesWrapper = styled.div``\r\n\r\nconst CommentWidget: FunctionComponent = function () {\r\n  const element = createRef<HTMLDivElement>()\r\n\r\n  useEffect(() => {\r\n    if (element.current === null) return\r\n\r\n    const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n    const attributes: UtterancesAttributesType = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: `github-light`,\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    }\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value)\r\n    })\r\n\r\n    element.current.appendChild(utterances)\r\n  }, [])\r\n\r\n  return <UtterancesWrapper ref={element} />\r\n}\r\n\r\nexport default CommentWidget\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\nimport { PostListItemType } from 'types/postItem.types'\r\n\r\nexport type PrevNextProps = {\r\n  prevPost: PostListItemType | null\r\n  nextPost: PostListItemType | null\r\n}\r\n\r\nconst PostWrapper = styled.ul`\r\n  overflow: hidden;\r\n`\r\n\r\nconst PostItem = styled.li`\r\n  width: calc(50% - 30px);\r\n\r\n  &.left {\r\n    float: left;\r\n  }\r\n\r\n  &.right {\r\n    float: right;\r\n    text-align: right;\r\n  }\r\n\r\n  a {\r\n    max-width: 100%;\r\n\r\n    &:hover strong {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`\r\n\r\nconst PostType = styled.p`\r\n  font: var(--font-italic);\r\n  color: var(--color-graytext);\r\n  margin-bottom: 12px;\r\n`\r\n\r\nconst Title = styled.p`\r\n  strong {\r\n    -webkit-line-clamp: 1;\r\n    font-weight: 400;\r\n  }\r\n`\r\n\r\nconst PostPrevNext: FunctionComponent<PrevNextProps> = function ({\r\n  prevPost,\r\n  nextPost,\r\n}) {\r\n  return (\r\n    <PostWrapper>\r\n      {nextPost !== null && (\r\n        <PostItem className=\"left\">\r\n          <Link to={nextPost.node.fields.slug}>\r\n            <PostType>← Previous</PostType>\r\n            <Title>\r\n              <strong className=\"text-overflow\">\r\n                {nextPost.node.frontmatter.title}\r\n              </strong>\r\n            </Title>\r\n          </Link>\r\n        </PostItem>\r\n      )}\r\n      {prevPost !== null && (\r\n        <PostItem className=\"right\">\r\n          <Link to={prevPost.node.fields.slug}>\r\n            <PostType>Next →</PostType>\r\n            <Title>\r\n              <strong className=\"text-overflow\">\r\n                {prevPost.node.frontmatter.title}\r\n              </strong>\r\n            </Title>\r\n          </Link>\r\n        </PostItem>\r\n      )}\r\n    </PostWrapper>\r\n  )\r\n}\r\n\r\nexport default PostPrevNext\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { graphql } from 'gatsby'\r\nimport { PostPageItemType, PostListItemType } from 'types/postItem.types'\r\nimport Template from 'components/common/template'\r\nimport PostHead from 'components/post/postHead'\r\nimport PostContent from 'components/post/postContent'\r\nimport CommentWidget from 'components/post/commentWidget'\r\nimport PostPrevNext from 'components/post/postPrevNext'\r\n\r\ntype PostTemplateProps = {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostPageItemType[]\r\n    }\r\n  }\r\n  location: {\r\n    href: string\r\n  }\r\n  pageContext: {\r\n    prev: PostListItemType\r\n    next: PostListItemType\r\n  }\r\n}\r\n\r\nconst Comment = styled.div`\r\n  border-top: 1px solid var(--color-gray);\r\n  margin: 3rem 0;\r\n  padding-top: 2rem;\r\n\r\n  h3 {\r\n    font-size: 1.5rem;\r\n    font-weight: 400;\r\n    margin-bottom: 1.25rem;\r\n  }\r\n`\r\n\r\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n  pageContext: { prev, next },\r\n}) {\r\n  const {\r\n    node: {\r\n      html,\r\n      frontmatter: { title, summary, date, update, categories },\r\n    },\r\n  } = edges[0]\r\n\r\n  return (\r\n    <Template title={title} description={summary} url={href}>\r\n      <PostHead\r\n        title={title}\r\n        date={date}\r\n        update={update}\r\n        categories={categories}\r\n      />\r\n      <PostContent html={html} />\r\n      <Comment>\r\n        <h3>Comments</h3>\r\n        <CommentWidget />\r\n      </Comment>\r\n      <PostPrevNext\r\n        prevPost={prev ? prev : null}\r\n        nextPost={next ? next : null}\r\n      />\r\n    </Template>\r\n  )\r\n}\r\n\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"MMM DD, YYYY\")\r\n            update(formatString: \"MMM DD, YYYY\")\r\n            categories\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["PostHeadWrapper","Title","PostData","Date","title","date","update","categories","___EmotionJSX","className","TagSVG","customStyle","join","ClockSVG","MarkdownRenderer","target","name","styles","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","_ref","key","value","setAttribute","appendChild","ref","PostWrapper","PostItem","PostType","prevPost","nextPost","Link","to","node","fields","slug","frontmatter","Comment","data","allMarkdownRemark","edges","location","href","pageContext","prev","next","summary","Template","description","url","PostHead","PostContent","CommentWidget","PostPrevNext"],"sourceRoot":""}